generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String    @unique
  firstname      String
  lastname       String
  hashedPassword String
  image          String?
  bio            String?
  nationality    String?
  role           Role?     @default(USER)
  emailVerified  DateTime?
  accounts       Account[]
  sessions       Session[]
  countries      Country[]
  reviews        Review[]
  recipes        Recipe[]
}

model Country {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  description String
  population  Int
  lat         Int
  lng         Int
  imageUrl    String
  flag        String?
  area        Int?
  capital     String?
  continent   String?
  playlistUrl String
  recipes     Recipe[]
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model Recipe {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  category     Diet?
  title        String
  description  String
  instructions String[]
  imageUrl     String
  time         String?
  servings     Int?
  ingredients  Ingredient[]
  reviews      Review[]
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?      @db.ObjectId
  Country      Country?     @relation(fields: [countryId], references: [id])
  countryId    String?      @db.ObjectId
}

model Ingredient {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  value    Float
  unit     String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String @db.ObjectId
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  summary   String
  rating    Int
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  Recipe    Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId  String?  @db.ObjectId
}

enum Role {
  ADMIN
  USER
}

enum Diet {
  MEAT
  FISH
  VEGETARIAN
}
